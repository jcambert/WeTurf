@page "/"
@page "/{Date}"
@using System.ComponentModel;
@using System.Runtime.CompilerServices;
@using We.Turf.Entities;
@using We.Utilities;
@inject IPmuServiceAppService pmuService;
@implements INotifyPropertyChanged
<Row>

    <Column Class="col-sm-8 col-md-6 col-lg-5  mx-auto ">

        <Div Class="programme-tab container">
            <Row>
                <Column ColumnSize="ColumnSize.IsFull">

                    <CascadingValue Name="Date" Value="CurrentDate" TValue="DateOnly">
                        <ProgrammeHeader DateChanged="SetDate"></ProgrammeHeader>
                    </CascadingValue>
                </Column>

            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.IsFull">
                    @if (CurrentDate == Today)
                    {
                        <CascadingValue Name="Predicteds" Value="Predicteds">
                            <ProgrammeContent/>
                        </CascadingValue>

                    }
                    else if (CurrentDate < Today)
                    {
                        <CascadingValue Name="ProgrammeCourses" Value="ProgrammeCourses">
                            <ProgrammeCourseContent/>
                        </CascadingValue>
                    }

                </Column>

            </Row>
        </Div>
    </Column>
    <Column Class="col-lg-7 d-none d-lg-block">
        <Div Class="main-tab container">
            MAIN

        </Div>
    </Column>
</Row>

@code {
    private DateOnly _date;
    private DateOnly Today;
    private IDisposable _whenDateChangedToToday;
    private IDisposable _whenDateChangeBeforeToday;
    public Index()
    {
        _whenDateChangedToToday = this.WhenPropertyChanged()
       .Where(e => e.EventArgs.PropertyName == nameof(CurrentDate) )
       .Select(e => _date)
       .Where(d=>d==Today)
       .Subscribe(async date => await LoadPredictedAsync(date));

        _whenDateChangeBeforeToday = this.WhenPropertyChanged()
       .Where(e => e.EventArgs.PropertyName == nameof(CurrentDate))
       .Select(e => _date)
       .Where(d => d < Today)
       .Subscribe(async date => await LoadProgammeCourseAsync(date));
    }
    protected override void OnInitialized()
    {
        Today = DateOnly.FromDateTime(DateTime.Now);

    }

    [Parameter]
    public string Date
    {
        get => _date.ToShortDateString();
        set
        {
            var res = value.TryParseToDateOnly(out var __date);
            if (!res)
            {
                __date = DateOnlyExtensions.Now;
            }
            CurrentDate = __date;

        }
    }
    internal DateOnly CurrentDate
    {
        get => _date;
        set
        {
            _date = value;
            NotifyPropertyChanged();
        }
    }

    private void SetDate(DateOnly d)
    {
        CurrentDate = d;
    }
    private List<PredictedDto> Predicteds { get; set; }
    private List<ProgrammeCourseDto> ProgrammeCourses{ get; set; }
    public event PropertyChangedEventHandler PropertyChanged;


    private async Task LoadPredictedAsync(DateOnly date)
    {
        var t = pmuService.BrowsePrediction(new() { Date = date });
        var (res, response) = await t;
        if (res)
        {
            Predicteds = response.Predicteds;

        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadProgammeCourseAsync(DateOnly date)
    {
        var t = pmuService.BrowseProgrammeCourse(new() { Date = date });
        var (res, response) = await t;
        if (res)
            ProgrammeCourses = response.Programmes;
        await InvokeAsync(StateHasChanged);
    }
    protected void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

}
