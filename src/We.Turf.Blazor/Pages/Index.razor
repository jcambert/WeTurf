@page "/"
@page "/{Date}"
@using System.ComponentModel;
@using System.Runtime.CompilerServices;
@using Volo.Abp.AspNetCore.Components.Notifications;
@using We.Turf.Entities;
@using We.Utilities;
@inject IPmuServiceAppService pmuService;
@inject IUiNotificationService notification;
@implements INotifyPropertyChanged
<Row>

    <Column Class="col-sm-8 col-md-6 col-lg-5  mx-auto ">

        <Div Class="programme-tab container">
            <Row>
                <Column ColumnSize="ColumnSize.IsFull">
                    <CascadingValue Name="SelectMode" Value="_mode">
                        <CascadingValue Name="Date" Value="CurrentDate" TValue="DateOnly?">
                            <ProgrammeHeader DateChanged="SetDate" OnSelectMode="ShowCourseOrReunion"></ProgrammeHeader>
                        </CascadingValue>
                    </CascadingValue>
                </Column>

            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.IsFull">
                    @if (CurrentDate == Today)
                    {
                        <CascadingValue Name="Predicteds" Value="Predicteds">
                            <ProgrammeContent />
                        </CascadingValue>

                    }
                    else if (CurrentDate < Today && ShowProgrammeCourse)
                    {
                        <CascadingValue Name="ProgrammeCourses" Value="ProgrammeCourses">
                            <CascadingValue Name="Predicteds" Value="Predicteds">
                                <CascadingValue Name="Resultats" Value="ResultatOfPredictedStatistical">
                                    <CascadingValue Name="PredictionsOnly" Value="PredictionsOnly">
                                        <ProgrammeCourseContent />
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    }
                    else if (CurrentDate < Today && ShowProgrammeReunion)
                    {

                        <CascadingValue Name="ProgrammeReunions" Value="ProgrammeReunions">
                            <ProgrammeReunionContent />
                        </CascadingValue>
                    }


                </Column>

            </Row>
        </Div>
    </Column>
    <Column Class="col-lg-7 d-none d-lg-block">
        <Div Class="main-tab container">
            MAIN

        </Div>
    </Column>
</Row>

@code {
    private DateOnly? _date;
    private DateOnly? Today;
    private IDisposable? _whenDateChangedToToday;
    private IDisposable? _whenDateChangeBeforeToday;
    private SelectMode? _mode;
    private bool ShowProgrammeCourse => _mode == SelectMode.Course;
    private bool ShowProgrammeReunion => _mode == SelectMode.Reunion;
    private List<PredictedDto> Predicteds { get; set; } = new();
    private List<ProgrammeCourseDto> ProgrammeCourses { get; set; } = new();
    private List<ProgrammeReunionDto> ProgrammeReunions { get; set; } = new();
    private List<ResultatDto> Resultats { get; set; } = new();
    private List<ResultatOfPredictedDto> ResultatOfPredicteds { get; set; } = new();
    private List<ResultatOfPredictedStatisticalDto> ResultatOfPredictedStatistical { get; set; } = new();
    private List<PredictedOnlyDto> PredictionsOnly { get; set; } = new();
    public event PropertyChangedEventHandler? PropertyChanged = null;
    public Index()
    {
    }
    protected override void OnInitialized()
    {
        _whenDateChangedToToday = this.WhenPropertyChanged()
       .Where(e => e.EventArgs.PropertyName == nameof(CurrentDate))
       .Select(e => _date)
       .Where(d => d == Today)
       .Subscribe(async date => await LoadPredictedAsync(date));

        _whenDateChangeBeforeToday = this.WhenPropertyChanged()
       .Where(e => e.EventArgs.PropertyName == nameof(CurrentDate))
       .Select(e => _date)
       .Where(d => d < Today)
       .Subscribe(async date =>
       {
           await LoadProgammeCourseAsync(date);
           await LoadProgammeReunionAsync(date);
           await LoadPredictedAsync(date);
           await LoadResultats(date);
           await LoadResultatOfPredicteds(date);
           await LoadPredictedOnly(date);
           await InvokeAsync(StateHasChanged);
       });
        ShowCourseOrReunion(SelectMode.Course);
        Today = DateOnly.FromDateTime(DateTime.Now);
        NotifyPropertyChanged("CurrentDate");

    }
#pragma warning disable BL0007
    [Parameter]
    public string Date
    {
        get => _date?.ToShortDateString() ?? string.Empty;
        set
        {
            var res = value.TryParseToDateOnly(out var __date);
            if (!res)
            {
                __date = DateOnlyExtensions.Now;
            }
            CurrentDate = __date;

        }
    }
#pragma warning restore BL0007
    internal DateOnly? CurrentDate
    {
        get => _date;
        set
        {
            _date = value;
            NotifyPropertyChanged();
        }
    }

    private void SetDate(DateOnly d)
    {
        CurrentDate = d;
    }
    private void ShowCourseOrReunion(SelectMode mode)
    {
        _mode = mode;
        // ShowProgrammeCourse = mode == SelectMode.Course;
        //ShowProgrammeReunion = !ShowProgrammeCourse;
        StateHasChanged();
    }

    private async Task LoadPredictedOnly(DateOnly? date)
    {
        var t = pmuService.BrowsePredictionOnly(new() { Date = date });
        var (res, response, errors) = await t;
        if (res)
        {
            PredictionsOnly = response.Predicteds;

        }
        else
        {
            await notification.Warn(errors.AsString());
        }
    }

    private async Task LoadResultatOfPredicteds(DateOnly? date)
    {
        var t = pmuService.BrowseResultatOfPredictedStatistical(new() { Date = date });
        var (res, response, errors) = await t;
        if (res)
        {
            ResultatOfPredictedStatistical = response.Resultats;

        }
        else
        {
            await notification.Warn(errors.AsString());
        }
    }
    private async Task LoadResultats(DateOnly? date)
    {
        var t = pmuService.BrowseResultat(new() { Date = date });
        var (res, response) = await t;
        if (res)
        {
            Resultats = response.Resultats;

        }
    }
    private async Task LoadPredictedAsync(DateOnly? date)
    {
        var t = pmuService.BrowsePrediction(new() { Date = date });
        var (res, response) = await t;
        if (res)
        {
            Predicteds = response.Predicteds;

        }
        //await InvokeAsync(StateHasChanged);
    }

    private async Task LoadProgammeCourseAsync(DateOnly? date)
    {
        if (date is null)
            return;
        var t = pmuService.BrowseProgrammeCourse(new() { Date = (DateOnly)date });
        var (res, response) = await t;
        if (res)
            ProgrammeCourses = response.Programmes;
        //await InvokeAsync(StateHasChanged);
    }

    private async Task LoadProgammeReunionAsync(DateOnly? date)
    {
        if (date is null)
            return;
        var t = pmuService.BrowseProgrammeReunion(new() { Date = (DateOnly)date });
        var (res, response) = await t;
        if (res)
            ProgrammeReunions = response.Reunions;
        //await InvokeAsync(StateHasChanged);
    }
    protected void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

}
