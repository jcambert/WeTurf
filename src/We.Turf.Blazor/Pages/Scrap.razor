@page "/scrap"
@page "/scrap/{start}"
@page "/scrap/{start}/{end}"
@using System.IO;
@using System.ComponentModel;
@using System.Runtime.CompilerServices;
@using RE=System.Text.RegularExpressions;
@using Volo.Abp.AspNetCore.Components.Notifications;
@using We.Results;
@using We.Processes;
@using We.Turf.Queries;
@using We.Utilities;
@using We.Blazor.Csv
@using We.Turf.Entities;
@inject IPmuScrapAppService Scrapper;
@inject IPmuServiceAppService AppService;
@inject IReactiveOutputExecutor Output;
@inject IUiNotificationService? UiNotificationService;
@implements INotifyPropertyChanged
<div class="mb-3">
    <Fields>
        <Field ColumnSize="ColumnSize.Is1.OnDesktop">
            <Check TValue="bool" @bind-Checked="@scrap">A Predire</Check>
        </Field>
        <Field ColumnSize="ColumnSize.Is1.OnDesktop">
            <Check TValue="bool" @bind-Checked="@predict">Chevaux predits</Check>
        </Field>
        <Field ColumnSize="ColumnSize.Is1.OnDesktop">
            <Check TValue="bool" @bind-Checked="@resultat">Resulats</Check>
        </Field>
        <Field ColumnSize="ColumnSize.Is1.OnDesktop">
            <Check TValue="bool" @bind-Checked="@scrapByFolderMonth">Par Dossier</Check>
        </Field>
    </Fields>
</div>
<div class="mb-3">
    <Fields>
        @if (!scrapByFolderMonth)
        {
            <Field ColumnSize="ColumnSize.Is3.OnDesktop" Visibility="@HideIfLoadFromFolder">
                <FieldLabel>Date Start</FieldLabel>
                <TextEdit Placeholder="Entrer date de debut" @bind-Text="@InnerStart" />
            </Field>
            <Field ColumnSize="ColumnSize.Is3.OnDesktop" Visibility="@HideIfLoadFromFolder">
                <FieldLabel>Date End</FieldLabel>
                <TextEdit Placeholder="Entrer date de fin" @bind-Text="@InnerEnd" />
            </Field>
        }
        else
        {
            <Field ColumnSize="ColumnSize.Is3.OnDesktop" Visibility="@HideIfLoadFromDate">
                <FieldLabel>Dossier de chargement (MM YYYY)</FieldLabel>
                <TextEdit Placeholder="Dossier " @bind-Text="@InnerFolder" />
            </Field>
        }
    </Fields>
</div>
<div class="mb-3">
    <Button Color="Color.Primary" Clicked="ClearConsole" Disabled="@isExtractRunning">Effacer la console</Button>
    <Button Color="Color.Primary" Clicked="Extract" Loading="@isExtractRunning" Disabled="@isExtractRunning" Visibility="@ExtractDatasVisibility">Extraction et Prediction</Button>
    <Button Color="Color.Secondary" Clicked="InsertDatas" Loading="@isInsertDatasRunning" Disabled="@isInsertDatasRunning" Visibility="@InsertDatasVisibility">Inserer dans la Base de données</Button>
</div>

<div class="mb-3">
    <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="output">Sortie</Tab>
            <Tab Name="to_predict">A Prédire</Tab>
            <Tab Name="predicted">Prediction</Tab>
            <Tab Name="courses">Courses</Tab>
            <Tab Name="resultats">Arrivées</Tab>
        </Items>
        <Content>
            <TabPanel Name="output">
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <label for="console" class="form-label">Console</label>
                        <textarea class="form-control" id="console" rows="30" @bind="ConsoleOutput"></textarea>
                    </Field>
                </Fields>
            </TabPanel>

            <ScrapTabPanelFile Name="to_predict" Files="ToPredictFiles" Type="PmuFileType.ToPredict" CsvHasHeader="false" />
            <ScrapTabPanelFile Name="predicted" Files="PredictedFiles" Type="PmuFileType.Predicted" CsvHasHeader="false" />
            <ScrapTabPanelFile Name="courses" Files="CoursesFiles" Type="PmuFileType.Course" CsvHasHeader="false" />
            <ScrapTabPanelFile Name="resultats" Files="ResultatsFiles" Type="PmuFileType.Resultat" CsvHasHeader="false" />


        </Content>
    </Tabs>
</div>

@code {
    bool scrap, predict, resultat, scrapByFolderMonth;
    string _innerFolder = string.Empty;
    [Parameter]
    public string Start { get; set; } = string.Empty;

    [Parameter]
    public string End { get; set; } = string.Empty;

    public ParameterDto? Parameter { get; set; } = null;
    public string InnerStart { get; set; } = string.Empty;
    public string InnerEnd { get; set; } = string.Empty;
    public string InnerFolder
    {
        get => _innerFolder;
        set
        {
            _innerFolder = value;
            NotifyPropertyChanged();
        }
    }

    bool isExtractRunning = false;
    bool isInsertDatasRunning = false;
    bool CanInsertdatas => ToPredictFiles.Any() || PredictedFiles.Any() || CoursesFiles.Any() || ResultatsFiles.Any();
    Visibility InsertDatasVisibility => CanInsertdatas ? Visibility.Visible : Visibility.Invisible;
    Visibility ExtractDatasVisibility => isInsertDatasRunning ? Visibility.Invisible : Visibility.Visible;
    Visibility HideIfLoadFromFolder => scrapByFolderMonth ? Visibility.Invisible : Visibility.Visible;
    Visibility HideIfLoadFromDate => !scrapByFolderMonth ? Visibility.Invisible : Visibility.Visible;



    List<FileWithContent> files = new();
    List<string> ColumnNames = new List<string>() { "date", "reunion", "course", "nom", "numPmu" };
    public string ConsoleOutput { get; set; } = string.Empty;
    IEnumerable<FileWithContent> ToPredictFiles => files.Where(x => x.Type == PmuFileType.ToPredict);
    IEnumerable<FileWithContent> PredictedFiles => files.Where(x => x.Type == PmuFileType.Predicted);
    IEnumerable<FileWithContent> CoursesFiles => files.Where(x => x.Type == PmuFileType.Course);
    IEnumerable<FileWithContent> ResultatsFiles => files.Where(x => x.Type == PmuFileType.Resultat);

    public event PropertyChangedEventHandler? PropertyChanged = null;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Start))
            scrapByFolderMonth = IsValidMonthYear(Start);

        await Result.Create(new GetParameterQuery())
        .Bind(q => Scrapper.GetParameter(q))
        .OnAsync(
            r => Parameter = r.Parameter,
            fail => Parameter = null
        );
        

        ConsoleOutput = string.Empty;
        Output.OnOutput.Subscribe(x => ConsoleOutput = $"{ConsoleOutput}\n{x}");

        if (scrapByFolderMonth)
        {

            var ss = Start.Split(' ');
            var dd = new DateOnly(int.Parse(ss[1]), int.Parse(ss[0]), 1);
            InnerStart = dd.ToString("ddMMyyyy");
            InnerEnd = dd.AddMonths(1).AddDays(-1).ToString("ddMMyyyy");
            InnerFolder = Start;
        }
        else
        {
            var dates = await ParseDate(Start, End);
            InnerStart = dates.Item1.ToString("ddMMyyyy");
            InnerEnd = dates.Item2.ToString("ddMMyyyy");
        }

        this.WhenPropertyChanged()
      .Where(e => e.EventArgs.PropertyName == nameof(InnerFolder))
      .Select(e => _innerFolder)
      .Subscribe(async folder => await UpdateFiles());

        await UpdateFiles();
    }




    string InputFolder
    {
        get
        {
            if (Parameter is null)
                return string.Empty;
            if (!string.IsNullOrEmpty(InnerFolder) && scrapByFolderMonth)
                return $"{Parameter.InputScrapFolder}{Path.DirectorySeparatorChar}{InnerFolder}";
            if (!scrapByFolderMonth)
                return Parameter?.InputScrapFolder ?? string.Empty;
            return string.Empty;
        }
    }
    string OutputFolder
    {
        get
        {
            if (Parameter is null)
                return string.Empty;
            if (!string.IsNullOrEmpty(InnerFolder) && scrapByFolderMonth)
                return $"{Parameter.OutputScrapFolder}{Path.DirectorySeparatorChar}{InnerFolder}";
            if (!scrapByFolderMonth)
                return Parameter?.OutputScrapFolder ?? string.Empty;
            return string.Empty;
        }
    }
    string ToPredictFilePath => Parameter is not null ? @$"{Parameter.BaseScrapFolder}{Path.DirectorySeparatorChar}{InputFolder}" : string.Empty;
    string PredictedFilename => Parameter is not null ? @$"{Parameter.BaseScrapFolder}{Path.DirectorySeparatorChar}{OutputFolder}{Path.DirectorySeparatorChar}{Parameter.PredictionFilename}" : string.Empty;
    string CourseFilename => Parameter is not null ? @$"{Parameter.BaseScrapFolder}{Path.DirectorySeparatorChar}{OutputFolder}{Path.DirectorySeparatorChar}{Parameter.CourseFilename}" : string.Empty;
    string OutputFilePath => Parameter is not null ? @$"{Parameter.BaseScrapFolder}{Path.DirectorySeparatorChar}{OutputFolder}" : string.Empty;

    async Task UpdateFiles()
    {

        files = new();
        if (!Directory.Exists(ToPredictFilePath))
            UiNotificationService?.Warn($"ToPredictFilePath {ToPredictFilePath} n'existe pas");
        else
        {
            await Result.Create(new BrowseToPredictFilesQuery() { Path = ToPredictFilePath })
            .Bind(q => Scrapper.BrowseToPredictFiles(q))
            .OnAsync(
                r => files.AddRange(r.Files.Select(x => new FileWithContent() { Path = x, Type = PmuFileType.ToPredict }))
            );
        }

        if (!File.Exists(PredictedFilename))
            UiNotificationService?.Warn($"PredictedFilename {PredictedFilename} n'existe pas");
        else
        {
            await Result.Create(new BrowsePredictedFilesQuery() { Filename = PredictedFilename })
            .Bind(q => Scrapper.BrowsePredictedFiles(q))
            .OnAsync(
                r => files.Add(new FileWithContent() { Path = r.File, Type = PmuFileType.Predicted })

            );
        }

        if (!File.Exists(CourseFilename))
            UiNotificationService?.Warn($"CourseFilename {CourseFilename} n'existe pas");
        else
        {

            await Result.Create(new BrowseCourseFilesQuery() { Filename = CourseFilename })
            .Bind(q => Scrapper.BrowseCourseFiles(q))
            .OnAsync(
                r => files.Add(new FileWithContent() { Path = r.File, Type = PmuFileType.Course })
            );
        }

        if (!Directory.Exists(OutputFilePath))
            UiNotificationService?.Warn($"OutputFilePath {OutputFilePath} n'existe pas");
        else
        {

            await Result.Create(new BrowseResultatsFilesQuery() { Path = OutputFilePath })
            .Bind(q => Scrapper.BrowseResultatsFiles(q))
            .OnAsync(
                r => files.AddRange(r.Files.Select(x => new FileWithContent() { Path = x, Type = PmuFileType.Resultat }))
            );


        }
        InvokeAsync(StateHasChanged);
    }

    private async Task<(DateOnly, DateOnly)> ParseDate(string startDate, string endDate)
    {
        var res_start = startDate.TryParseToDateOnly(out var _date_start);
        var res_end = endDate.TryParseToDateOnly(out var _date_end);

        if (!res_start)
        {
            await Result.Create(new GetLastScrappedQuery())
            .Bind(q => Scrapper.GetLastScrapped(q))
            .OnAsync(
                r => _date_start = DateOnly.FromDateTime(r.LastScrapped.LastDate).AddDays(1),
                fail => _date_start = DateOnlyExtensions.Now
            );
        }
        if (!res_end)
        {
            if (!Int32.TryParse(endDate, out int _count))
                _count = 1;
            _date_end = _date_start.AddDays(_count);
        }


        if (_date_start > _date_end)
        {
            var tmp = _date_start;
            _date_start = _date_end;
            _date_end = tmp;
        }
        return (_date_start, _date_end);
    }

    public void ClearConsole() => ConsoleOutput = string.Empty;

    public async Task Extract()
    {
        isExtractRunning = true;

        var dates = await ParseDate(InnerStart, InnerEnd);
        Output.WriteLine("Démarrage");
        if (scrap)
        {

            Output.WriteLine($"Scrap Start:{dates.Item1.ToShortDateString()} to Scrap End:{dates.Item2.ToShortDateString()}\nLaunched ...");
            await Result.Create(new ScrapQuery()
                {
                    Start = dates.Item1,
                    End = dates.Item2,
                    DeleteFilesIfExists = true,
                    UseFolder = scrapByFolderMonth ? InnerFolder : string.Empty,
                })
                .Bind(q => Scrapper.Scrap(q))
                .OnAsync(
                    r => { },
                    fail => Output.WriteLine(fail.Errors.AsString())
                );
                /*var result0 = await Scrapper.Scrap(
                new ScrapQuery()
                {
                Start = dates.Item1,
                End = dates.Item2,
                DeleteFilesIfExists = true,
                UseFolder = scrapByFolderMonth ? InnerFolder : string.Empty,
    });

    if (!result0)
        Output.WriteLine(result0.Errors);*/
        }

        if (predict)
        {
            Output.WriteLine("Prediction");

            await Result.Create(new PredictQuery() { UseFolder = scrapByFolderMonth ? InnerFolder : string.Empty, DeleteFilesIfExists = !scrapByFolderMonth })
            .Bind(q => Scrapper.Predict(q))
            .OnAsync(
                r => { },
                fail => Output.WriteLine(fail.Errors.AsString())
            );


            /*var result0 = await Scrapper.Predict(new PredictQuery() { UseFolder = scrapByFolderMonth ? InnerFolder : string.Empty, DeleteFilesIfExists = !scrapByFolderMonth });
                if (!result0)
                    Output.WriteLine(result0.Errors);*/
        }

        if (resultat)
        {
            Output.WriteLine("Resultats");
            await Result.Create(new ResultatQuery()
                {
                    Start = dates.Item1,
                    End = dates.Item2,
                    UseFolder = scrapByFolderMonth ? InnerFolder : string.Empty,
                    DeleteFilesIfExists = !scrapByFolderMonth
                })
                .Bind(q => Scrapper.Resultats(q))
                .OnAsync(
                    r => { },
                    fail => Output.WriteLine(fail.Errors.AsString())
                );
            /*var result0 = await Scrapper.Resultats(new ResultatQuery()
                {
                    Start = dates.Item1,
                    End = dates.Item2,
                    UseFolder = scrapByFolderMonth ? InnerFolder : string.Empty,
                    DeleteFilesIfExists = !scrapByFolderMonth
                });
            if (!result0)
                Output.WriteLine(result0.Errors);*/
        }

        Output.WriteLine("Fini..");

        await UpdateFiles();

        isExtractRunning = false;
    }

    public async Task InsertDatas()
    {
        ConsoleOutput = string.Empty;
        isInsertDatasRunning = true;
        Action<Result> handleError = res =>
        {
            UiNotificationService?.Warn("Regarder la console", "Attention");
            Output.WriteLine(res.Errors.AsString("[ERROR]"));
        };
        Action<string, string> handleSuccess = (title, msg) =>
        {
            Output.WriteLine(msg);
            UiNotificationService?.Success(msg, title);
        };

        if (scrap && predict && resultat)
        {
            await Result.Create(new LoadOutputFolderIntoDbQuery())
            .Bind(q => AppService.LoadOutputFolderIntoDb(q))
            .OnAsync(
                r => handleSuccess("Confirmation", "Toutes les insertions se sont bien déroulées"),
                fail => handleError(fail)
            );

        }
        else
        {

            if (scrap && ToPredictFiles.Any())
            {
                Output.Write("Insertion des chevaux a predire");
                var f = ToPredictFiles.First();

                await Result.Create(new LoadToPredictIntoDbQuery() { Filename = f.Path, Rename = false })
                .Bind(q => AppService.LoadToPredictIntoDatabase(q))
                .OnAsync(
                    r => handleSuccess("A Predire", $"{r.Participants.Count} participants inserées"),
                    fail => handleError(fail)
                    );
            }
            if (predict && PredictedFiles.Any())
            {
                Output.Write("Insertion des chevaux predis");
                foreach (var f in PredictedFiles)
                {
                    await Result.Create(new LoadPredictedIntoDbQuery() { Filename = f.Path, Rename = false })
                    .Bind(q => AppService.LoadPredictedIntoDb(q))
                    .OnAsync(
                        r => handleSuccess("Prediction", $"{r.Predicted.Count} participants inserés"),
                        fail => handleError(fail)
                    );

                }

            }
            if (resultat && (ResultatsFiles.Any() || CoursesFiles.Any()))
            {
                Output.Write("Insertion des resultats");
                foreach (var f in ResultatsFiles)
                {
                    await Result.Create(new LoadResultatIntoDbQuery() { Filename = f.Path, Rename = false })
                    .Bind(q => AppService.LoadResultatIntoDb(q))
                    .OnAsync(
                        r => handleSuccess("Resultat", $"{r.Resultats.Count} resultats inserés"),
                        fail => handleError(fail)
                    );

                }
                foreach (var f in CoursesFiles)
                {
                    await Result.Create(new LoadCourseIntoDbQuery() { Filename = f.Path, Rename = false })
                    .Bind(q => AppService.LoadCourseIntoDb(q))
                    .OnAsync(
                        r => handleSuccess("Course", $"{r.Courses.Count} courses inserées"),
                        fail => handleError(fail)
                    );
                }

            }
        }
        isInsertDatasRunning = false;

    }

    private async Task RefreshFileContent(PmuFileType type)
    {
        foreach (var f in files.Where(x => x.Type == type))
            await RefreshFileContent(f);
    }
    private async Task RefreshFileContent(FileWithContent file)
    {
        //if (file is null)
        await file.RefreshFileContent();
    }

    string selectedTab = "output";

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

    protected void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public static bool IsValidMonthYear(string input)
    {
        RE.Regex regex = new RE.Regex(@"^\d{2}\s+\d{4}$");
        RE.Match match = regex.Match(input);

        return match.Success;
    }
}
