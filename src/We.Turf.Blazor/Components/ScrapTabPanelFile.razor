@using We.Blazor.Csv
<TabPanel Name="@Name">
    <Button Color="Color.Primary" Clicked="e=>RefreshFileContent()" Visibility="RefreshButtonVisibility" Loading="RefreshButtonLoading" Disabled="RefreshButtonLoading">Raffraichir Tout</Button>
    <Fields>
        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
            <Accordion>
                @if (Files is not null)
                    @foreach (var f in Files)
                    {
                        <Collapse Visible="@f.IsVisible">
                            <CollapseHeader>
                                <Heading Size="HeadingSize.Is5">
                                    <AccordionToggle Clicked="e=>ToggleAccordion(f)">@f.Path</AccordionToggle>
                                </Heading>
                            </CollapseHeader>
                            <CollapseBody>
                                <Button Color="Color.Primary" Clicked="e=>RefreshFileContent(f)" Disabled="@f.IsLoading" Loading="@f.IsLoading">Raffraichir</Button>
                                <Csv Content="@f.Content" Separator="@CsvSeparator" HasHeader="CsvHasHeader" LimitRow="CsvLimitRow" ColumnNames="ColumnNames" ></Csv>
                            </CollapseBody>
                        </Collapse>
                    }
            </Accordion>


        </Field>

    </Fields>

</TabPanel>

@code {
    [Parameter, EditorRequired]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public int? CsvLimitRow { get; set; } = 3;
    [Parameter]
    public bool CsvHasHeader { get; set; } = true;
    [Parameter]
    public string CsvSeparator { get; set; } = ";";
    [Parameter]
    public List<string> ColumnNames{get; set;}=new();
    [Parameter, EditorRequired]
    public IEnumerable<FileWithContent> Files { get; set; } = new List<FileWithContent>();
    [Parameter,EditorRequired]
    public PmuFileType Type { get; set; }


    Visibility RefreshButtonVisibility => Files.Any() ? Visibility.Visible : Visibility.Invisible;

    bool RefreshButtonLoading => Files.Any(f => f.IsLoading);

    private async Task ToggleAccordion(FileWithContent file)
    {
        file.IsVisible = !file.IsVisible;
        await RefreshFileContent(file);
    }
    private async Task RefreshFileContent(FileWithContent? file = null)
    {
        if (file is null)
            foreach (var f in Files)
                await f.RefreshFileContent();
        else
            await file.RefreshFileContent();
        await InvokeAsync(StateHasChanged);
    }
}
