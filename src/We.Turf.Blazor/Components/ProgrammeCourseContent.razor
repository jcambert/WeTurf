@using We.Turf.Entities;
@using We.Turf.Queries;
@using We.Utilities;
@using System.Diagnostics;
@inject IPmuServiceAppService? AppService;
@if (Courses != null)
{
    

    <Row>
        <ul>
            <li>Somme des mises:@SommeDesMises.Mises.ToN2String() €</li>
            <li>Somme des Dividendes:@SommeDesMises.Dividendes.ToN2String() €</li>
        </ul>



    </Row>

    @foreach (var course in Courses.OrderBy(x => x.Reunion).ThenBy(x => x.Course))
    {

        IEnumerable<ResultatPlace> ResultatsCourse = GetResultatsCourse(course);

        <CourseCard>
            <Column ColumnSize="ColumnSize.IsFull">

                <Row>
                    <CourseCardNumber Reunion="course.Reunion" Course="course.Course" />
                    <CourseCardDescription Description1="@(course.Hippodrome)" Description2="@(course.Libelle)" />
                    <Column ColumnSize="ColumnSize.Is2">
                    </Column>
                </Row>
                <Row>
                    <Column ColumnSize="ColumnSize.Is2">&nbsp;</Column>
                    <Column ColumnSize="ColumnSize.Is10">

                        <Row Class="course-resume ms-1">@course.Discipline - @course.Distance @course.DistanceUnite - @course.NombrePartants Partants</Row>
                        <Row Class="course-resultat">


                            <Column ColumnSize="ColumnSize.IsHalf">

                                @foreach (var (item, index) in course.Arrivee.Take(5).WithIndex())
                                {
                                    <CascadingValue Name="Predicteds" Value="Predicteds">
                                        <CascadingValue Name="Course" Value="course">
                                            <ResultatPill Type="ResultatPillType.Arrivee" NumeroPmu="item" Index="index" />
                                        </CascadingValue>
                                    </CascadingValue>
                                }
                            </Column>


                            <Column ColumnSize="ColumnSize.IsHalf">
                                @foreach (var (item, index) in ResultatsCourse.WithIndex())
                                {

                                    <CascadingValue Name="Predicteds" Value="Predicteds">
                                        <CascadingValue Name="Course" Value="course">
                                            <ResultatPill Type="ResultatPillType.Prediction" NumeroPmu="item.NumPmu" Index="index" PredictionCount="item.Count" Dividende="item.DividendePlace"/>
                                        </CascadingValue>
                                    </CascadingValue>

                                }
                                @ResultatsCourse.Count()
                                @ResultatsCourse.Sum(x=>x.DividendePlace).ToN2String()
                                @((ResultatsCourse.Sum(x => x.DividendePlace) - ResultatsCourse.Count() ).ToN2String())
                            </Column>

                        </Row>


                    </Column>

                </Row>
            </Column>
        </CourseCard>
    }
}


@code {
    [CascadingParameter(Name = "ProgrammeCourses")] public List<ProgrammeCourseDto> Courses { get; set; } = new();
    [CascadingParameter(Name = "Predicteds")] public List<PredictedDto> Predicteds { get; set; } = new();
    //[CascadingParameter(Name = "Resultats")] public List<ResultatDto> Resultats { get; set; } = new();
    [CascadingParameter(Name = "Resultats")] List<ResultatOfPredictedStatisticalDto> Resultats { get; set; } = new();
    [CascadingParameter(Name = "PredictionsOnly")] public List<PredictedOnlyDto> PredictionsOnly { get; set; } = new();
    [Parameter] public (int Mises, double Dividendes) SommeDesMises { get; set; } = (0, 0.0);



    [CascadingParameter(Name = "ResultatsOfPredicteds")] public Dictionary<(int, int), IEnumerable<ResultatPlace>> ResultatsOfPredicteds { get; set; } = new();


    IEnumerable<ResultatPlace> GetResultatsCourse(ProgrammeCourseDto course) => ResultatsOfPredicteds.ContainsKey((course.Reunion, course.Course)) ? ResultatsOfPredicteds[(course.Reunion, course.Course)] : new List<ResultatPlace>();

   /* public (int, double) CalculSommeDesMises()
        => (PredictionsOnly.Count(), Resultats.Sum(x => x.Dividende));*/


    

    /*public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        parameters.TryGetValue<List<PredictedDto>>(nameof(Predicteds), out var value0);
        parameters.TryGetValue<List<ProgrammeCourseDto>>(nameof(Courses), out var value1);
        parameters.TryGetValue<List<ResultatOfPredictedStatisticalDto>>(nameof(Resultats), out var value2);
        parameters.TryGetValue<List<PredictedOnlyDto>>(nameof(PredictionsOnly), out var value3);
       

        if ( (value0?.Any() ?? false) && (value1?.Any() ?? false) && (value2?.Any() ?? false) && (value3?.Any() ?? false))
            InternalInitialization();


        

    }*/
}
