@using We.Turf.Entities;
@using We.Turf.Queries;
@using We.Utilities;
@using System.Diagnostics;
@inject IPmuServiceAppService? AppService;
@if (Courses != null)
{


    <Row>
        <ul>
            <li>Somme des mises:@SommeDesMises.Mise.ToN2String() €</li>
            <li>Somme des Dividendes:@SommeDesMises.Dividende.ToN2String() €</li>
        </ul>



    </Row>

    @foreach (var course in Courses.OrderBy(x => x.Reunion).ThenBy(x => x.Course))
    {

        IEnumerable<ResultatPlace> ResultatsCourse = GetResultatsCourse(course);
        string targetId = $"r{course.Reunion}c{course.Course}";
        <CourseCard id="@targetId">
            <Column ColumnSize="ColumnSize.IsFull">

                <Row>
                    <CourseCardNumber Reunion="course.Reunion" Course="course.Course" />
                    <CourseCardDescription Description1="@(course.Hippodrome)" Description2="@(course.Libelle)" />
                    <Column ColumnSize="ColumnSize.Is2">
                    </Column>
                </Row>
                <Row>
                    <Column ColumnSize="ColumnSize.Is2">&nbsp;</Column>
                    <Column ColumnSize="ColumnSize.Is10">

                        <Row Class="course-resume ms-1">@course.Discipline - @course.Distance @course.DistanceUnite - @course.NombrePartants Partants</Row>
                        <Row Class="course-resultat">


                            <Column ColumnSize="ColumnSize.IsHalf">

                                @foreach (var (item, index) in course.Arrivee.Take(5).WithIndex())
                                {
                                    <CascadingValue Name="Predicteds" Value="Predicteds">
                                        <CascadingValue Name="Course" Value="course">
                                            <CascadingValue Name="TypePari" Value="Pari">
                                                <ResultatPill Type="ResultatPillType.Arrivee" NumeroPmu="item" Index="index"  />
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>
                                }
                            </Column>


                            <Column ColumnSize="ColumnSize.IsHalf">
                                @{
                                    var r = ResultatsCourse.Where(x => x.Count >= (IndiceConfiance ?? 0));
                                }
                                @foreach (var (item, index) in r.WithIndex())
                                {

                                    <CascadingValue Name="Predicteds" Value="Predicteds">
                                        <CascadingValue Name="Course" Value="course">
                                            <CascadingValue Name="TypePari" Value="Pari">
                                                <ResultatPill Type="ResultatPillType.Prediction" NumeroPmu="item.NumPmu" Index="index" PredictionCount="item.Count" Dividende="item.DividendePlace" ShowBadgeUp="Classifier==0"/>
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>

                                }
                                @if (r.Any())
                                {
                                    <em>
                                        @r.Count()
                                    </em>
                                    <em>

                                    @r.Sum(x=>x.DividendePlace).ToN2String() 
                                    </em>
                                    <em>

                                    @((r.Sum(x => x.DividendePlace) - r.Count()).ToN2String())
                                    </em>

                                }
                            </Column>

                        </Row>


                    </Column>

                </Row>
            </Column>
        </CourseCard>
    }
}


@code {
    [CascadingParameter(Name = "ProgrammeCourses")] public List<ProgrammeCourseDto> Courses { get; set; } = new();
    [CascadingParameter(Name = "Predicteds")] public List<PredictedDto> Predicteds { get; set; } = new();
    //[CascadingParameter(Name = "Resultats")] public List<ResultatDto> Resultats { get; set; } = new();
    [CascadingParameter(Name = "Resultats")] List<ResultatOfPredictedStatisticalDto> Resultats { get; set; } = new();
    [CascadingParameter(Name = "PredictionsOnly")] public List<PredictedOnlyDto> PredictionsOnly { get; set; } = new();
    [CascadingParameter(Name = "TypePari")] public TypePari Pari { get; set; } = TypePari.Tous;
    [CascadingParameter(Name = "ResultatsOfPredicteds")] public Dictionary<(int, int), IEnumerable<ResultatPlace>> ResultatsOfPredicteds { get; set; } = new();

    [Parameter] public SommeDesMises SommeDesMises { get; set; } = new(0, 0.0);
    [Parameter] public int? IndiceConfiance{ get; set; }
    [Parameter,EditorRequired] public int Classifier{ get; set; }




    IEnumerable<ResultatPlace> GetResultatsCourse(ProgrammeCourseDto course) => ResultatsOfPredicteds.ContainsKey((course.Reunion, course.Course)) ? ResultatsOfPredicteds[(course.Reunion, course.Course)] : new List<ResultatPlace>();

    
}
